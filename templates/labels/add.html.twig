{% extends 'base.html.twig' %}

{% block title %}New Labels{% endblock %}

{% block body %}
    <div class="jumbotron">
        <h1 class="">Mise en rayonnage </h1>
        ROU-1565283090-1
    </div>




<div class="row justify-content-md-center">
    <div class="col-12 col-sm-12 col-md-6 col-lg-5 col-xl-4">
        <div class="card">
            <div class="card-header">
                Placer un support
            </div>
            <div class="card-body center-form">
                {{ form_start(form, {'attr': {'id': 'MyForm','role':'form'}}) }}
                    <div class="form-group" >
                        <div>
                            {{ form_label(form.localLabel) }}
                        </div>
                        <div class="input-group" id="localLabel">
                            <div>
                            {{ form_errors(form.localLabel) }}
                            {{ form_widget(form.localLabel) }}
                            </div>
                            <span class="input-group-btn">
                                <button class="btn btn-outline-dark" type="button" data-toggle="modal" data-target="#_scanBar" id="LocalLabel"><i class="fa fa-barcode"></i></button>
                            </span>
                        </div>
                    </div>

                    <div class="form-group" >
                        <div>
                            {{ form_label(form.newLocation) }}
                        </div>
                        <div class="input-group">
                            <div>
                                {{ form_errors(form.newLocation) }}
                                {{ form_widget(form.newLocation) }}
                            </div>
                            <span class="input-group-btn">
                                <button class="btn btn-outline-dark" type="button" data-toggle="modal" data-target="#_scanBar" id="NewLocation"><i class="fa fa-barcode"></i></button>
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            {{ form_label(form.lice) }}
                        </div>
                        <div class="input-group">
                            <div>
                                {{ form_errors(form.lice) }}
                                {{ form_widget(form.lice) }}
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-block btn-success" id="Btn_Location">{{ button_label|default('Valider') }}</button>
                {{ form_end(form) }}
            </div>
            <div class="card-footer">
                <a class="btn btn-dark" href="{{ path('labels_index') }}"><span class="fa fa-arrow-left" aria-hidden="true"></span></a>
            </div>
        </div>
    </div>

</div>
<div class="row">

</div>


{{ include('other/scanbar.html.twig') }}

{% endblock %}


{% block javascripts %}
<script type="text/javascript">

    const InputLocalLabel = document.getElementById("add_label_in_location_localLabel")
    const InputLocation = document.getElementById("add_label_in_location_newLocation")
    const InputLice = document.getElementById("add_label_in_location_lice")
    const BtnScan  = document.getElementById("NewLocation")
    const BtnLocation  = document.getElementById("Btn_Location")

    const MyInput = [InputLocation, InputLice, BtnScan]

    //DÃ©sactivation des inputs et du bouton de validation
    IsNotActiveInput(MyInput, true)
    IsNotActiveInput([BtnLocation], true)

    document.getElementById("MyForm").addEventListener('input', async function (e)
    {
        const formData = new FormData(this)
        await getFetch(formData);
    })

    async function FindLabelIfExist() {
        const formData = new FormData(document.getElementById("MyForm"))
        await getFetch(formData);
    }

    async function getFetch(formData) {
        let response = await fetch("{{ path('find_label_in_base') }}", {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: formData
        })

        let responseData = await response.json().then((function (responseData) {
            IsValidClass(responseData, InputLocalLabel, MyInput)
        }))
    }

    function IsValidClass(Response, Input, DeactiveInput)
    {
        if(Response === true )
        {
            Input.classList.remove('is-invalid')
            Input.classList.add('is-valid')
        }else{
            Input.classList.remove('is-valid')
            Input.classList.add('is-invalid')
        }
        IsNotActiveInput(DeactiveInput,!Response)
    }

    function IsNotActiveInput(DeactiveInput, disable)
    {
        DeactiveInput.forEach(function(element) {
            disable === false ? element.removeAttribute("disabled") : element.setAttribute("disabled", "")
        });
    }

    var cell = null;

    $('#NewLocation').click(function(event){
        cell = 'add_label_in_location_newLocation';
    });

    $('#LocalLabel').click(function(event){
        cell = 'add_label_in_location_localLabel';
    });

    //JS du scanbar
   window.addEventListener('load', function () {
       let selectedDeviceId;
       console.log(cell);
       const codeReader = new ZXing.BrowserMultiFormatReader()
       codeReader.getVideoInputDevices()
           .then((videoInputDevices) => {
               const sourceSelect = document.getElementById('sourceSelect')
               selectedDeviceId = videoInputDevices[0].deviceId
               if (videoInputDevices.length >= 1) {
                   videoInputDevices.forEach((element) => {
                       const sourceOption = document.createElement('option')
                       sourceOption.text = element.label
                       sourceOption.value = element.deviceId
                       sourceSelect.appendChild(sourceOption)
                   })
                   sourceSelect.onchange = () => {
                       selectedDeviceId = sourceSelect.value;
                   };
                   const sourceSelectPanel = document.getElementById('sourceSelectPanel')
                   sourceSelectPanel.style.display = 'block'
               }

               document.getElementById('startButton').addEventListener('click', () => {
                   document.getElementById(cell).value = '';
                   codeReader.decodeFromVideoDevice(selectedDeviceId, 'video', (result, err) => {
                       if (result) {
                           document.getElementById(cell).value = result.text
                           if(cell === 'add_label_in_location_localLabel'){
                               FindLabelIfExist()
                           }
                           codeReader.reset()
                           $('#_scanBar').modal('hide');
                       }
                       if (err && !(err instanceof ZXing.NotFoundException)) {
                           document.getElementById('result').textContent = err
                       }
                   })
               })

               document.getElementById('resetButton').addEventListener('click', () => {
                   codeReader.reset()
                   document.getElementById(cell).value = '';
                   document.getElementById(cell).classList.remove('is-invalid')
                   document.getElementById(cell).classList.remove('is-valid')
               })
           })
           .catch((err) => {
               console.error(err)
           })
       $('.closemodal').click(function () {
           codeReader.reset()
           $('.modal').modal('hide')

       })

       $(function () {
           $('.modal').on('hide.bs.modal', function (e) {
               codeReader.reset()
           })
       })
   })
</script>

{% endblock %}
