{% extends 'base.html.twig' %}

{% block title %}Ajouter une entrée{% endblock %}
{% block stylesheets %}
<style>
    #interactive.viewport {position: relative; width: 100%; height: auto; overflow: hidden; text-align: center;}
    #interactive.viewport > canvas, #interactive.viewport > video {max-width: 100%;width: 100%;}
    canvas.drawing, canvas.drawingBuffer {position: absolute; left: 0; top: 0;}
</style>
{% endblock %}
{% block body %}


            <div class="jumbotron">
                <h1>Ajouter une nouvelle commande</h1>
            </div>


            <div class="col-12">
                {{ include('orders/_form.html.twig') }}
            </div>


    <div class="modal livestream_scanner" id="livestream_scanner">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Barcode Scanner</h4>
                </div>
                <div class="modal-body" style="position: static">
                    <div id="interactive" class="viewport"></div>
                    <div class="error"></div>
                </div>
                <div class="modal-footer">
                    <label class="btn btn-default pull-left">
                        <i class="fa fa-camera"></i> Use camera app
                        <input type="file" accept="image/*;capture=camera" capture="camera" class="hidden" />
                    </label>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->





    <a href="{{ path('orders_index') }}">back to list</a>
{% endblock %}

{% block javascripts %}

    <script type="text/javascript">


        $(document).ready(function() {


            let $container = $('div#orders_new_productListings');
            let index = $container.find(':input').length;
            $('#add_ticket').click(function(e) {
                addTicket($container);
                console.log($container.attr('data-prototype'))
                e.preventDefault();
                return false;
            });

            if (index == 0) {
                addTicket($container);
            } else {
                $container.children('div').each(function() {
                    addDeleteLink($(this));
                });
            }
            function addTicket($container) {
                let template = $container.attr('data-prototype')
                    .replace(/__name__label__/g, 'Entrée n°' + (index+1))
                    .replace(/__name__/g,        index)
                    .replace(/<div >/g, "<div class='custom'>")
                ;
                let $prototype = $(template);
                addDeleteLink($prototype);
                $container.append($prototype);
                index++;
            }
            function addDeleteLink($prototype) {
                let $deleteLink = $('<div class="text-center btn_delete"><a href="#" class="btn btn-sm btn-danger">Supprimer</a></div>');
                $prototype.append($deleteLink);
                $deleteLink.click(function(e) {
                    $prototype.remove();
                    e.preventDefault();
                    return false;
                });
            }
        });

        $('.datepicker').datepicker({
            todayBtn: "linked",
            clearBtn: true,
            language: "fr",
            calendarWeeks: true,
            autoclose: true,
            todayHighlight: true,
            format: 'yyyy-mm-dd',
            startDate: new Date()
        });


    </script>


    <script type="text/javascript">
        $(document).ready(function() {
            // Create the QuaggaJS config object for the live stream
            let liveStreamConfig = {
                inputStream: {
                    type : "LiveStream",
                    constraints: {
                        width: {min: 640},
                        height: {min: 480},
                        aspectRatio: {min: 1, max: 100},
                        facingMode: "environment" // or "user" for the front camera
                    }
                },
                locator: {
                    patchSize: "medium",
                    halfSample: true
                },
                numOfWorkers: (navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4),
                decoder: {
                    "readers":[
                        {"format":"ean_reader","config":{}}
                    ]
                },
                locate: true
            };
            // The fallback to the file API requires a different inputStream option.
            // The rest is the same
            let fileConfig = $.extend(
                {},
                liveStreamConfig,
                {
                    inputStream: {
                        size: 800
                    }
                }
            );
            // Start the live stream scanner when the modal opens
            $('.livestream_scanner').on('shown.bs.modal', function (e) {
                Quagga.init(
                    liveStreamConfig,
                    function(err) {
                        if (err) {
                            $('.livestream_scanner .modal-body .error').html('<div class="alert alert-danger"><strong><i class="fa fa-exclamation-triangle"></i> '+err.name+'</strong>: '+err.message+'</div>');
                            Quagga.stop();
                            return;
                        }
                        Quagga.start();
                    }
                );
            });

            // Make sure, QuaggaJS draws frames an lines around possible
            // barcodes on the live stream
            Quagga.onProcessed(function(result) {
                let drawingCtx = Quagga.canvas.ctx.overlay,
                    drawingCanvas = Quagga.canvas.dom.overlay;

                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                        result.boxes.filter(function (box) {
                            return box !== result.box;
                        }).forEach(function (box) {
                            Quagga.ImageDebug.drawPath(box, {x: 0, y: 1}, drawingCtx, {color: "green", lineWidth: 2});
                        });
                    }

                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box, {x: 0, y: 1}, drawingCtx, {color: "#00F", lineWidth: 2});
                    }

                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line, {x: 'x', y: 'y'}, drawingCtx, {color: 'red', lineWidth: 3});
                    }
                }
            });

            // Once a barcode had been read successfully, stop quagga and
            // close the modal after a second to let the user notice where
            // the barcode had actually been found.
            Quagga.onDetected(function(result) {
                if (result.codeResult.code){
                    $('.scanner_input').val(result.codeResult.code);
                    Quagga.stop();
                    setTimeout(function(){ $('.livestream_scanner').modal('hide'); }, 1000);
                }
            });

            // Stop quagga in any case, when the modal is closed
            $('.livestream_scanner').on('hide.bs.modal', function(){
                if (Quagga){
                    Quagga.stop();
                }
            });

            // Call Quagga.decodeSingle() for every file selected in the
            // file input
            $(".livestream_scanner input:file").on("change", function(e) {
                if (e.target.files && e.target.files.length) {
                    Quagga.decodeSingle($.extend({}, fileConfig, {src: URL.createObjectURL(e.target.files[0])}), function(result) {alert(result.codeResult.code);});
                }
            });
        });
    </script>
{% endblock %}
